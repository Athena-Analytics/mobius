AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION='true'
AIRFLOW__CORE__DAG_IGNORE_FILE_SYNTAX='glob'
AIRFLOW__CORE__EXECUTOR=CeleryExecutor
# See https://airflow.apache.org/docs/apache-airflow/stable/security/secrets/fernet.html
AIRFLOW__CORE__FERNET_KEY=''
AIRFLOW__CORE__LOAD_EXAMPLES='false'
AIRFLOW__CORE__TEST_CONNECTION=Enabled

AIRFLOW__WEBSERVER__WARN_DEPLOYMENT_EXPOSURE = False
AIRFLOW__WEBSERVER__X_FRAME_ENABLED = False

AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://<username>:<password>@<host>:<port>/<db>

AIRFLOW__CELERY__BROKER_URL=redis://<host>:<port>/0
AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://<username>:<password>@<host>:<port>/<db>
AIRFLOW__CELERY__WORKER_CONCURRENCY=8

AIRFLOW__API__AUTH_BACKENDS='airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'

# Use simple http server on scheduler for health checks
# See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK='true'
AIRFLOW__SCHEDULER__PARSING_PROCESSES=4

# WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
# for other purpose (development, test and especially production usage) build/extend Airflow image.
_PIP_ADDITIONAL_REQUIREMENTS=${_PIP_ADDITIONAL_REQUIREMENTS:-}

# The following line can be used to set a custom config file, stored in the local config folder
# If you want to use it, uncomment it and replace airflow.cfg with the name of your config file
# AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'